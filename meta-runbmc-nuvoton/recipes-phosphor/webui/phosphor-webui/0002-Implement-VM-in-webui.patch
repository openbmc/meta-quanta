From caafa268d47b09b36ae5cf1d4ce013bc0ab880d5 Mon Sep 17 00:00:00 2001
From: Medad <ctcchien@nuvoton.com>
Date: Fri, 30 Nov 2018 09:22:24 +0800
Subject: [PATCH 2/2] Implement VM in webui

1. vmws is websocket 2. enablemstgws and disablemstgws are http request

Change-Id: Ib9555c9cde45d9f6fa6ca434767f7fec2fff36d4
Signed-off-by: Medad <ctcchien@nuvoton.com>
---
 app/index.js                          |   5 +-
 app/vm/controllers/nbd/nbd.js         | 360 ++++++++++++++++++++++++++
 app/vm/controllers/vm-controller.html |  25 ++
 app/vm/controllers/vm-controller.js   | 103 ++++++++
 app/vm/index.js                       |  28 ++
 5 files changed, 520 insertions(+), 1 deletion(-)
 create mode 100644 app/vm/controllers/nbd/nbd.js
 create mode 100644 app/vm/controllers/vm-controller.html
 create mode 100644 app/vm/controllers/vm-controller.js
 create mode 100644 app/vm/index.js

diff --git a/app/index.js b/app/index.js
index fff4a16..b7b5d61 100644
--- a/app/index.js
+++ b/app/index.js
@@ -82,6 +82,9 @@ import user_accounts_controller from './users/controllers/user-accounts-controll
 import kvm_index from './kvm/index.js';
 import kvm_controller from './kvm/controllers/kvm-controller.js';
 
+import vm_index from './vm/index.js';
+import vm_controller from './vm/controllers/vm-controller.js';
+
 window.angular && (function(angular) {
   'use strict';
 
@@ -98,7 +101,7 @@ window.angular && (function(angular) {
             // Model resources
             'app.login', 'app.overview', 'app.serverControl',
             'app.serverHealth', 'app.configuration', 'app.users', 'app.redfish',
-            'app.kvm'
+            'app.kvm', 'app.vm'
           ])
       // Route configuration
       .config([
diff --git a/app/vm/controllers/nbd/nbd.js b/app/vm/controllers/nbd/nbd.js
new file mode 100644
index 0000000..618ea1f
--- /dev/null
+++ b/app/vm/controllers/nbd/nbd.js
@@ -0,0 +1,360 @@
+/* Copyright 2018 IBM Corp.
+ *
+ * Author: Jeremy Kerr <jk@ozlabs.org>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License.  You may obtain a copy
+ * of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+
+/* handshake flags */
+const NBD_FLAG_FIXED_NEWSTYLE = 0x1;
+const NBD_FLAG_NO_ZEROES = 0x2;
+
+/* transmission flags */
+const NBD_FLAG_HAS_FLAGS = 0x1;
+const NBD_FLAG_READ_ONLY = 0x2;
+
+/* option negotiation */
+const NBD_OPT_EXPORT_NAME = 0x1;
+const NBD_REP_FLAG_ERROR = 0x1 << 31;
+const NBD_REP_ERR_UNSUP = NBD_REP_FLAG_ERROR | 1;
+
+/* command definitions */
+const NBD_CMD_READ = 0;
+const NBD_CMD_WRITE = 1;
+const NBD_CMD_DISC = 2;
+const NBD_CMD_FLUSH = 3;
+const NBD_CMD_TRIM = 4;
+
+/* errno */
+const EPERM = 1;
+const EIO = 5;
+const ENOMEM = 12;
+const EINVAL = 22;
+const ENOSPC = 28;
+const EOVERFLOW = 75;
+const ESHUTDOWN = 108;
+
+/* internal object state */
+const NBD_STATE_UNKNOWN = 1;
+const NBD_STATE_OPEN = 2;
+const NBD_STATE_WAIT_CFLAGS = 3;
+const NBD_STATE_WAIT_OPTION = 4;
+const NBD_STATE_TRANSMISSION = 5;
+
+export default function NBDServer(endpoint, file)
+{
+    this.file = file;
+    this.endpoint = endpoint;
+    this.ws = null;
+    this.state = NBD_STATE_UNKNOWN;
+    this.msgbuf = null;
+
+    this.start = function()
+    {
+        this.state = NBD_STATE_OPEN;
+        this.ws = new WebSocket(this.endpoint);
+        this.ws.binaryType = 'arraybuffer';
+        this.ws.onmessage = this._on_ws_message.bind(this);
+        this.ws.onopen = this._on_ws_open.bind(this);
+    }
+
+    this.stop = function()
+    {
+        this.ws.close();
+        this.state = NBD_STATE_UNKNOWN;
+    }
+
+    this._log = function(msg)
+    {
+        if (this.onlog)
+            this.onlog(msg);
+    }
+
+    /* websocket event handlers */
+    this._on_ws_open = function(ev)
+    {
+        this.client = {
+            flags: 0,
+        };
+        this._negotiate();
+        if (this.onconnected)
+            this.onconnected();
+    }
+
+    this._on_ws_message = function(ev)
+    {
+        var data = ev.data;
+
+        if (this.msgbuf == null) {
+            this.msgbuf = data;
+        } else {
+            var tmp = new Uint8Array(this.msgbuf.byteLength + data.byteLength);
+            tmp.set(new Uint8Array(this.msgbuf), 0);
+            tmp.set(new Uint8Array(data), this.msgbuf.byteLength);
+            this.msgbuf = tmp.buffer;
+        }
+
+        for (;;) {
+            var handler = this.recv_handlers[this.state];
+            if (!handler) {
+                this._log("no handler for state " + this.state);
+                this.stop();
+                break;
+            }
+
+            var consumed = handler(this.msgbuf);
+            if (consumed < 0) {
+                this._log("handler[state=" + this.state +
+                        "] returned error " + consumed);
+                this.stop();
+                break;
+            }
+
+            if (consumed == 0)
+                break;
+
+            if (consumed > 0) {
+                if (consumed == this.msgbuf.byteLength) {
+                    this.msgbuf = null;
+                    break;
+                }
+                this.msgbuf = this.msgbuf.slice(consumed);
+            }
+        }
+    }
+
+    this._negotiate = function()
+    {
+        var buf = new ArrayBuffer(18);
+        var data = new DataView(buf, 0, 18);
+
+        /* NBD magic: NBDMAGIC */
+        data.setUint32(0,  0x4e42444d);
+        data.setUint32(4,  0x41474943);
+
+        /* newstyle negotiation: IHAVEOPT */
+        data.setUint32(8,  0x49484156);
+        data.setUint32(12, 0x454F5054);
+
+        /* flags: fixed newstyle negotiation, no padding */
+        data.setUint16(16, NBD_FLAG_FIXED_NEWSTYLE | NBD_FLAG_NO_ZEROES);
+
+        this.state = NBD_STATE_WAIT_CFLAGS;
+        this.ws.send(buf);
+    }
+
+    /* handlers */
+    this._handle_cflags = function(buf)
+    {
+        if (buf.byteLength < 4)
+            return 0;
+
+        var data = new DataView(buf, 0, 4);
+        this.client.flags = data.getUint32(0);
+
+        this._log("client flags received: 0x" +
+                this.client.flags.toString(16));
+
+        this.state = NBD_STATE_WAIT_OPTION;
+        return 4;
+    }
+
+    this._handle_option = function(buf)
+    {
+        if (buf.byteLength < 16)
+            return 0;
+
+        var data = new DataView(buf, 0, 16);
+        if (data.getUint32(0) != 0x49484156 ||
+                data.getUint32(4) != 0x454F5054) {
+            this._log("invalid option magic");
+            return -1;
+        }
+
+        var opt = data.getUint32(8);
+        var len = data.getUint32(12);
+
+        this._log("client option received: 0x" + opt.toString(16));
+
+        if (buf.byteLength < 16 + len)
+            return 0;
+
+        switch (opt) {
+        case NBD_OPT_EXPORT_NAME:
+            this._log("endpoint:"+endpoint);
+            this._log("file size:"+ this.file.size );
+            this._log("negotiation complete, starting transmission mode");
+            var n = 10;
+            if (!(this.client.flags & NBD_FLAG_NO_ZEROES))
+                n += 124;
+            var resp = new ArrayBuffer(n);
+            var view = new DataView(resp, 0, 10);
+            /* export size. todo: 64 bits? */
+            view.setUint32(0, 0);
+            view.setUint32(4, this.file.size & 0xffffffff);
+            /* transmission flags: read-only */
+            view.setUint16(8, NBD_FLAG_HAS_FLAGS | NBD_FLAG_READ_ONLY);
+            this._log("view:"+view);
+            this.ws.send(resp);
+
+            this.state = NBD_STATE_TRANSMISSION;
+            break;
+
+        default:
+            /* reject other options */
+            var resp = new ArrayBuffer(20);
+            var view = new DataView(resp, 0, 20);
+            view.setUint32(0, 0x0003e889);
+            view.setUint32(4, 0x045565a9);
+            view.setUint32(8, opt);
+            view.setUint32(12, NBD_REP_ERR_UNSUP);
+            view.setUint32(16, 0);
+            this.ws.send(resp);
+        }
+
+        return 16 + len;
+    }
+
+    this._create_cmd_response = function(req, rc, data = null)
+    {
+        var len = 16;
+        if (data)
+            len += data.byteLength;
+        var resp = new ArrayBuffer(len);
+        var view = new DataView(resp, 0, 16);
+        view.setUint32(0, 0x67446698);
+        view.setUint32(4, rc);
+        view.setUint32(8, req.handle_msB);
+        view.setUint32(12, req.handle_lsB);
+        if (data)
+            new Uint8Array(resp, 16).set(new Uint8Array(data));
+        return resp;
+    }
+
+    this._handle_cmd = function(buf)
+    {
+        if (buf.byteLength < 28)
+            return 0;
+
+        var view = new DataView(buf, 0, 28);
+
+        if (view.getUint32(0) != 0x25609513) {
+            this._log("invalid request magic");
+            return -1;
+        }
+
+        var req = {
+            flags: view.getUint16(4),
+            type: view.getUint16(6),
+            handle_msB: view.getUint32(8),
+            handle_lsB: view.getUint32(12),
+            offset_msB: view.getUint32(16),
+            offset_lsB: view.getUint32(20),
+            length: view.getUint32(24),
+        };
+
+        /* we don't support writes, so nothing needs the data at present */
+        /* req.data = buf.slice(28); */
+
+        var err = 0;
+        var consumed = 28;
+
+        /* the command handlers return 0 on success, and send their
+         * own response. Otherwise, a non-zero error code will be
+         * used as a simple error response
+         */
+        switch (req.type) {
+        case NBD_CMD_READ:
+            err = this._handle_cmd_read(req);
+            break;
+
+        case NBD_CMD_DISC:
+            err = this._handle_cmd_disconnect(req);
+            break;
+
+        case NBD_CMD_WRITE:
+	    /* we also need length bytes of data to consume a write
+	     * request */
+	    if (buf.byteLength < 28 + req.length)
+		    return 0;
+	    consumed += req.length;
+	    err = EPERM;
+	    break;
+
+        case NBD_CMD_TRIM:
+            err = EPERM;
+            break;
+
+        default:
+            this._log("invalid command 0x" + req.type.toString(16));
+            err = EINVAL;
+        }
+
+        if (err) {
+            var resp = this._create_cmd_response(req, err);
+            this.ws.send(resp);
+        }
+
+        return consumed;
+    }
+
+    this._handle_cmd_read = function(req)
+    {
+        if (req.offset_msB)
+            return ENOSPC;
+
+        if (req.offset_lsB + req.length > file.size)
+            return ENOSPC;
+
+        /*this._log("read: 0x" + req.length.toString(16) +
+         *       " bytes, offset 0x" + req.offset_lsB.toString(16));
+         */
+        var blob = this.file.slice(req.offset_lsB,
+                req.offset_lsB + req.length);
+        var reader = new FileReader();
+
+        reader.onload = (function(ev) {
+            var reader = ev.target;
+            if (reader.readyState != FileReader.DONE)
+                return;
+            var resp = this._create_cmd_response(req, 0, reader.result);
+            this.ws.send(resp);
+        }).bind(this);
+
+        reader.onerror = (function(ev) {
+            var reader = ev.target;
+            this._log("error reading file: " + reader.error);
+            var resp = this._create_cmd_response(req, EIO);
+            this.ws.send(resp);
+        }).bind(this);
+
+        reader.readAsArrayBuffer(blob);
+
+        return 0;
+    }
+
+    this._handle_cmd_disconnect = function(req)
+    {
+            this._log("disconnect received");
+            this.stop();
+            return 0;
+    }
+
+    this.recv_handlers = Object.freeze({
+        [NBD_STATE_WAIT_CFLAGS]: this._handle_cflags.bind(this),
+        [NBD_STATE_WAIT_OPTION]: this._handle_option.bind(this),
+        [NBD_STATE_TRANSMISSION]: this._handle_cmd.bind(this),
+    });
+}
+
+
diff --git a/app/vm/controllers/vm-controller.html b/app/vm/controllers/vm-controller.html
new file mode 100644
index 0000000..1a2eabf
--- /dev/null
+++ b/app/vm/controllers/vm-controller.html
@@ -0,0 +1,25 @@
+<loader loading="loading"></loader>
+<div class="row column">
+  <h1>Virtual Media</h1>
+</div>
+<div class="row column" id="upload">
+  <div class="column small-12 page-header">
+    <h2 class="inline h3 bold">Specify image file location</h2>
+  </div>
+  <form id="firmware__upload-form" role="form" class="firmware__upload-form">
+    <p>Specify an image file located on your workstation . A File System image file could be mounted.</p>
+    <div class=" column firmware__upload-station">
+      <h3 class="h4 bold">Upload image file from workstation</h3>
+      <p>Select the image file saved on the workstation storage medium to upload to the server BMC.</p>
+      <label for="file-upload" class="inline firmware__upload-chooser">
+        <input id="file-upload" type="file" file="file" class="hide" onchange="angular.element(this).scope().uploadFile(this.files)"/>
+        <span class="button btn-secondary inline">Choose a file</span>
+        <span class="inline firmware__upload-file-name"><span ng-if="!file">No file chosen</span><span ng-if="file.name !== undefined">{{file.name}}</span></span>
+      </label>
+      <input type="button" value="Start VM"    ng-show="startbutton"  class="inline button btn-primary float-right" ng-click="action()"/>
+      <input type="button" value="Stop VM"     ng-show="stopbutton"   class="inline button btn-primary float-right" ng-click="stopaction()"/>
+      <input type="button" value="Mount USB"   ng-show="mountbutton"  class="inline button btn-primary float-right" ng-click="enablemstg()"/>
+      <input type="button" value="UMount USB"  ng-show="umountbutton" class="inline button btn-primary float-right" ng-click="disablemstg()"/>
+    </div>
+  </form>
+</div>
\ No newline at end of file
diff --git a/app/vm/controllers/vm-controller.js b/app/vm/controllers/vm-controller.js
new file mode 100644
index 0000000..0b945b2
--- /dev/null
+++ b/app/vm/controllers/vm-controller.js
@@ -0,0 +1,103 @@
+/**
+ * Controller for vm
+ *
+ * @module app/vm
+ * @exports vmController
+ * @name vmController
+ */
+
+import NBDServer from './nbd/nbd.js';
+
+var server;
+var file;
+var enableusbws;
+var disableusbws;
+window.angular && (function (angular) {
+    'use strict';
+
+    angular.module('app.vm').controller('vmController', [
+        '$scope',
+        '$location',
+        '$window',
+        'dataService',
+        function ($scope, $location, $window, dataService) {
+            $scope.dataService = dataService;
+
+            $scope.startbutton = false;
+            $scope.stopbutton = false;
+            $scope.mountbutton = false;
+            $scope.umountbutton = false;
+
+            $scope.uploadFile = function(files) {
+                $scope.dsblBtnStart = false;
+                file = files[0];
+                if(file){
+                    $scope.startbutton = true;
+                    $scope.debuglog = file.name;
+                }else
+                    $scope.startbutton = false;
+            };
+
+            $scope.action = function () {
+                var host = dataService.server_id;
+                $scope.nbdsip = host;
+
+                $scope.debuglog= '';
+                $scope.uploading = true;
+                $scope.stopbutton = true;
+                $scope.startbutton = false;
+                $scope.mountbutton = true;
+                server = new NBDServer("wss://"+host+"/vmws", file);
+                server.onlog = function(msg) {
+                    $scope.nbdslog += msg + "\n";
+                }
+                server.start();
+                server.onconnected = function(){
+                    $scope.debuglog ="vmws onconnected";
+                }
+            };
+
+            $scope.stopaction = function () {
+                if(server){
+                    server.stop();
+                    server = null;
+
+                    $scope.uploading = false;
+                    $scope.startbutton = true;
+                    $scope.stopbutton = false;
+                    $scope.mountbutton = false;
+                    $scope.umountbutton = false;
+                }
+            };
+
+            $scope.enablemstg = function () {
+                var host = dataService.server_id;
+
+                $scope.startbutton = false;
+                $scope.stopbutton = false;
+                $scope.mountbutton = false;
+                $scope.umountbutton = true;
+
+                var xmlHttp = new XMLHttpRequest();
+                xmlHttp.open( "GET", "/enablemstgws", false );
+                xmlHttp.send( null );
+
+            };
+
+            $scope.disablemstg = function () {
+                var host = dataService.server_id;
+
+                $scope.startbutton = false;
+                $scope.stopbutton = true;
+                $scope.mountbutton = true;
+                $scope.umountbutton = false;
+
+                var xmlHttp = new XMLHttpRequest();
+                xmlHttp.open( "GET", "/disablemstgws", false );
+                xmlHttp.send( null );
+
+            };
+        }
+    ]);
+
+})(angular);
diff --git a/app/vm/index.js b/app/vm/index.js
new file mode 100644
index 0000000..c86dfc8
--- /dev/null
+++ b/app/vm/index.js
@@ -0,0 +1,28 @@
+/**
+ * A module for the VM
+ *
+ * @module app/vm/index
+ * @exports app/vm/index
+ * @version 0.0.1
+ */
+window.angular && (function (angular) {
+    'use strict';
+
+    angular
+        .module('app.vm', [
+            'ngRoute',
+            'app.common.services'
+        ])
+        // Route configuration
+        .config(['$routeProvider', function ($routeProvider) {
+            $routeProvider
+                .when('/vm', {
+                    'template': require('./controllers/vm-controller.html'),
+                    'controller': 'vmController',
+                    authenticated: true
+                })
+        }]);
+
+})(window.angular);
+
+
-- 
2.17.1

