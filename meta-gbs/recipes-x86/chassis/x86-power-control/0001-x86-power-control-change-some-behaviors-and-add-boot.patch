From 11b67339323c4c02324ceeac5c777734b6517fae Mon Sep 17 00:00:00 2001
From: George Hung <george.hung@quantatw.com>
Date: Tue, 10 Nov 2020 22:29:52 +0800
Subject: [PATCH] x86-power-control: change some behaviors and add boot
 progress DBus

1. gracefully power off -> force power off
2. increase PS_PWROK watchdog timeout to 60 secs
3. Add boot progress DBus

Signed-off-by: George Hung <george.hung@quantatw.com>
---
 power-control-x86/src/power_control.cpp | 86 ++++++++++++++++++++++++-
 1 file changed, 84 insertions(+), 2 deletions(-)

diff --git a/power-control-x86/src/power_control.cpp b/power-control-x86/src/power_control.cpp
index ab704d8..ca579e0 100644
--- a/power-control-x86/src/power_control.cpp
+++ b/power-control-x86/src/power_control.cpp
@@ -53,6 +53,7 @@ static std::string resetButtonName;
 static std::string idButtonName;
 static std::string nmiButtonName;
 
+static std::shared_ptr<sdbusplus::asio::dbus_interface> bootIface;
 static std::shared_ptr<sdbusplus::asio::dbus_interface> hostIface;
 static std::shared_ptr<sdbusplus::asio::dbus_interface> chassisIface;
 #ifdef CHASSIS_SYSTEM_RESET
@@ -75,7 +76,7 @@ const static constexpr int forceOffPulseTimeMs = 15000;
 const static constexpr int resetPulseTimeMs = 500;
 const static constexpr int powerCycleTimeMs = 5000;
 const static constexpr int sioPowerGoodWatchdogTimeMs = 1000;
-const static constexpr int psPowerOKWatchdogTimeMs = 8000;
+const static constexpr int psPowerOKWatchdogTimeMs = 60000;
 const static constexpr int gracefulPowerOffTimeMs = 60000;
 const static constexpr int warmResetCheckTimeMs = 500;
 const static constexpr int buttonMaskTimeMs = 60000;
@@ -148,6 +149,16 @@ static void beep(const uint8_t& beepPriority)
         "xyz.openbmc_project.BeepCode", "Beep", uint8_t(beepPriority));
 }
 
+enum class BootProgressStage
+{
+    Unspecified,
+    MemoryInit,
+    SecondaryProcInit,
+    PCIInit,
+    OSStart,
+    MotherboardInit,
+};
+
 enum class PowerState
 {
     on,
@@ -394,6 +405,39 @@ static uint64_t getCurrentTimeMs()
     return currentTimeMs;
 }
 
+static constexpr std::string_view getBootProgressStage(const BootProgressStage stage)
+{
+    switch (stage)
+    {
+        case BootProgressStage::MemoryInit:
+            return "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MemoryInit";
+            break;
+        case BootProgressStage::SecondaryProcInit:
+            return "xyz.openbmc_project.State.Boot.Progress.ProgressStages.SecondaryProcInit";
+            break;
+        case BootProgressStage::PCIInit:
+            return "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit";
+            break;
+        case BootProgressStage::OSStart:
+            return "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart";
+            break;
+        case BootProgressStage::MotherboardInit:
+            return "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit";
+            break;
+        case BootProgressStage::Unspecified:
+        default:
+            return "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified";
+            break;
+    }
+};
+static void setBootProgress(const BootProgressStage stage)
+{
+    bootIface->set_property("BootProgress",
+                            std::string(getBootProgressStage(stage)));
+    std::cerr << "Moving boot progress to \""
+            << std::string(getBootProgressStage(stage)) << "\" stage.\n";
+}
+
 static constexpr std::string_view getHostState(const PowerState state)
 {
     switch (state)
@@ -2046,11 +2090,13 @@ static void postCompleteHandler()
     {
         sendPowerControlEvent(Event::postCompleteAssert);
         osIface->set_property("OperatingSystemState", std::string("Standby"));
+        setBootProgress(BootProgressStage::OSStart);
     }
     else
     {
         sendPowerControlEvent(Event::postCompleteDeAssert);
         osIface->set_property("OperatingSystemState", std::string("Inactive"));
+        setBootProgress(BootProgressStage::Unspecified);
     }
     postCompleteEvent.async_wait(
         boost::asio::posix::stream_descriptor::wait_read,
@@ -2339,6 +2385,42 @@ int main(int argc, char* argv[])
     std::cerr << "Initializing power state. ";
     power_control::logStateTransition(power_control::powerState);
 
+    // Boot Progress Service
+    sdbusplus::asio::object_server bootServer =
+        sdbusplus::asio::object_server(power_control::conn);
+
+    // Boot Progress Interface
+    power_control::bootIface = bootServer.add_interface(
+        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Boot.Progress");
+
+    power_control::bootIface->register_property(
+        "BootProgress",
+        std::string("xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified"),
+        [](const std::string& requested, std::string& resp) {
+            if (requested == "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MemoryInit")
+            {
+            }
+            else if (requested == "xyz.openbmc_project.State.Boot.Progress.ProgressStages.SecondaryProcInit")
+            {
+            }
+            else if (requested == "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit")
+            {
+            }
+            else if (requested == "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart")
+            {
+            }
+            else if (requested == "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit")
+            {
+            }
+            else
+            {
+            }
+            resp = requested;
+            return 1;
+        });
+
+    power_control::bootIface->initialize();
+
     // Power Control Service
     sdbusplus::asio::object_server hostServer =
         sdbusplus::asio::object_server(power_control::conn);
@@ -2354,7 +2436,7 @@ int main(int argc, char* argv[])
             if (requested == "xyz.openbmc_project.State.Host.Transition.Off")
             {
                 sendPowerControlEvent(
-                    power_control::Event::gracefulPowerOffRequest);
+                    power_control::Event::powerOffRequest);
                 addRestartCause(power_control::RestartCause::command);
             }
             else if (requested ==
-- 
2.21.0

